name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Debug Files and Paths
      run: |
        echo "Current working directory: $(Get-Location)"
        echo "Repository root: ${{ github.workspace }}"
        echo "Checking backend Dockerfile:"
        if (Test-Path "${{ github.workspace }}/app/backend/Dockerfile") {
          echo "✅ Backend Dockerfile exists"
          cat "${{ github.workspace }}/app/backend/Dockerfile"
        } else {
          echo "❌ Backend Dockerfile NOT found"
          echo "Files in backend directory:"
          Get-ChildItem "${{ github.workspace }}/app/backend" -Force
        }
        
        echo "Checking frontend Dockerfile:"
        if (Test-Path "${{ github.workspace }}/app/frontend/Dockerfile") {
          echo "✅ Frontend Dockerfile exists"
          cat "${{ github.workspace }}/app/frontend/Dockerfile"
        } else {
          echo "❌ Frontend Dockerfile NOT found"
          echo "Files in frontend directory:"
          Get-ChildItem "${{ github.workspace }}/app/frontend" -Force
        }
    
    - name: Configure Minikube Docker environment
      run: |
        echo "Setting up minikube environment..."
        try {
          & minikube -p minikube docker-env --shell powershell | Invoke-Expression
          echo "✅ Minikube environment configured successfully"
        } catch {
          echo "❌ Error configuring Minikube environment: $_"
          exit 1
        }
        
    - name: Build Docker images directly in Minikube
      run: |
        # Navigate to repository root to ensure paths are correct
        cd "${{ github.workspace }}"
        
        # Build backend image with full paths
        echo "Building backend image..."
        try {
          docker build -t employee-backend:latest -f "${{ github.workspace }}/app/backend/Dockerfile" "${{ github.workspace }}/app/backend"
          echo "✅ Backend image built successfully"
        } catch {
          echo "❌ Error building backend image: $_"
          exit 1
        }
        
        # Build frontend image with full paths
        echo "Building frontend image..."
        try {
          docker build -t employee-frontend:latest -f "${{ github.workspace }}/app/frontend/Dockerfile" "${{ github.workspace }}/app/frontend"
          echo "✅ Frontend image built successfully"
        } catch {
          echo "❌ Error building frontend image: $_"
          exit 1
        }
        
    - name: Update Kubernetes files for local images
      run: |
        # Navigate to repository root
        cd "${{ github.workspace }}"
        
        # Update image names in deployment files to use local images
        echo "Updating Kubernetes deployment files..."
        (Get-Content kubernetes/backend-deployment.yaml) -replace 'image:.*', 'image: employee-backend:latest' | Set-Content kubernetes/backend-deployment.yaml
        (Get-Content kubernetes/frontend-deployment.yaml) -replace 'image:.*', 'image: employee-frontend:latest' | Set-Content kubernetes/frontend-deployment.yaml
        
    - name: Deploy to Minikube
      run: |
        # Navigate to repository root
        cd "${{ github.workspace }}"
        
        # Apply Kubernetes manifests
        echo "Deploying to Kubernetes..."
        try {
          kubectl apply -f kubernetes/namespace.yaml
          kubectl apply -f kubernetes/backend-deployment.yaml
          kubectl apply -f kubernetes/backend-service.yaml
          kubectl apply -f kubernetes/frontend-deployment.yaml
          kubectl apply -f kubernetes/frontend-service.yaml
          echo "✅ Deployment completed successfully"
        } catch {
          echo "❌ Error during deployment: $_"
          exit 1
        }
        
    - name: Verify deployment
      run: |
        echo "Checking deployment status..."
        kubectl get pods -n emp-management
        kubectl get services -n emp-management
        kubectl get deployments -n emp-management -o wide
        
        # Wait for pods to be ready
        echo "Waiting for pods to be ready..."
        $maxRetries = 10
        $retryCount = 0
        $allReady = $false
        
        while (-not $allReady -and $retryCount -lt $maxRetries) {
          $pods = kubectl get pods -n emp-management -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | Select-String -Pattern "false" -Quiet
          if (-not $pods) {
            $allReady = $true
            echo "✅ All pods are ready!"
          } else {
            $retryCount++
            echo "⏳ Waiting for pods to be ready... Attempt $retryCount of $maxRetries"
            Start-Sleep -Seconds 10
          }
        }
        
        if (-not $allReady) {
          echo "❌ Pods did not become ready within the timeout period"
          kubectl describe pods -n emp-management
          exit 1
        }