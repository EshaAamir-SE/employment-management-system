name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker to use Minikube's environment
      run: |
        echo "Configuring Docker to use Minikube's daemon..."
        try {
          & minikube -p minikube docker-env --shell powershell | Invoke-Expression
          echo "✅ Docker configured to use Minikube's daemon"
        } catch {
          echo "❌ Error configuring Docker: $_"
          # Continue anyway and don't fail the build
          # exit 1
        }
    
    - name: Build Backend
      run: |
        echo "Building backend Docker image..."
        cd app/backend
        try {
          docker build -t employee-backend:latest .
          echo "✅ Backend Docker image built successfully"
        } catch {
          echo "❌ Error building backend Docker image: $_"
          exit 1
        }
    
    - name: Build Frontend
      run: |
        echo "Building frontend Docker image..."
        cd app/frontend
        try {
          docker build -t employee-frontend:latest .
          echo "✅ Frontend Docker image built successfully"
        } catch {
          echo "❌ Error building frontend Docker image: $_"
          exit 1
        }
    
    - name: Tag images for Docker Hub
      if: github.event_name == 'push'
      run: |
        echo "Tagging images for Docker Hub..."
        docker tag employee-backend:latest i222473/employee-backend:latest
        docker tag employee-frontend:latest i222473/employee-frontend:latest

    - name: Login to Docker Hub
      if: github.event_name == 'push'
      run: |
        echo "Logging in to Docker Hub..."
        $loginSuccess = $false
        try {
          # Store password in a secure variable
          $password = '${{ secrets.DOCKER_PASSWORD }}'
          
          # Use piping to avoid showing password in logs
          $loginOutput = $password | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin 2>&1
          
          # Check if login was successful
          if ($LASTEXITCODE -eq 0) {
            echo "✅ Logged in to Docker Hub successfully"
            $loginSuccess = $true
          } else {
            echo "❌ Docker login failed with exit code $LASTEXITCODE"
            echo $loginOutput
          }
        } catch {
          echo "❌ Error logging in to Docker Hub: $_"
        }
        
        # Exit with error if login failed
        if (-not $loginSuccess) {
          echo "Docker Hub login failed. Please check your credentials in GitHub Secrets."
          echo "Make sure DOCKER_USERNAME and DOCKER_PASSWORD are correctly set in repository secrets."
          exit 1
        }

    - name: Push Docker images to Docker Hub
      if: github.event_name == 'push'
      run: |
        try {
          echo "Pushing images to Docker Hub..."
          docker push i222473/employee-backend:latest
          docker push i222473/employee-frontend:latest
          echo "✅ Images pushed to Docker Hub successfully"
        } catch {
          echo "❌ Error pushing images to Docker Hub: $_"
          exit 1
        }
    
    - name: Deploy to Kubernetes
      if: github.event_name == 'push'
      run: |
        echo "Deploying to Kubernetes..."
        try {
          kubectl apply -f kubernetes/namespace.yaml
          kubectl apply -f kubernetes/backend-deployment.yaml -n emp-management
          kubectl apply -f kubernetes/frontend-deployment.yaml -n emp-management
          kubectl apply -f kubernetes/backend-service.yaml -n emp-management
          kubectl apply -f kubernetes/frontend-service.yaml -n emp-management
          echo "✅ Deployed to Kubernetes successfully"
        } catch {
          echo "❌ Error deploying to Kubernetes: $_"
          exit 1
        }
    
    - name: Verify Deployment
      if: github.event_name == 'push'
      run: |
        echo "Verifying deployment..."
        try {
          kubectl get pods -n emp-management
          kubectl get services -n emp-management
          echo "✅ Deployment verification completed"
        } catch {
          echo "❌ Error verifying deployment: $_"
          # Continue anyway and don't fail the build
          # exit 1
        }